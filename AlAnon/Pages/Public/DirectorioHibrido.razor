@page "/publico/grupos"

@inject IGrupoRepository _grupoRepository
@inject IInfoRepository _infoRepository

<h1 class="text-center font-weight-bold">JUNTAS EN ESPAÑOL</h1>
@if (isLoading)
{
	//Loading Symbol
	<div class="text-center pt-4">
		<img src="/images/loading.gif">
	</div>
}
else
{
	<h3 class="text-center font-weight-bold">@Informacion.NumeroIntegrupal</h3>
	if (ListaDeGrupos.Count() > 0)
	{
		@foreach (var tipo in SD.ListaDeTipos)
		{
			@*Only print if any meetings exist with tipo*@
			@if (ListaDeGrupos.Where(u => u.TipoDeJunta == tipo).Count() > 0)
			{
				<h3 class="font-weight-bold text-decoration-underline">@tipo</h3>
				@foreach (var area in SD.ListaDeAreas)
				{
					@*Only print if any meetings exist with area*@
					@if (ListaDeGrupos.Where(u => u.Area == area && u.TipoDeJunta == tipo).Count() > 0)
					{
						<p class="text-decoration-underline">@area:</p>
						<div class="container">
							<div class="row  pb-3 pt-3 backgroundWhite">
								@foreach (var grupo in ListaDeGrupos.Where(u => u.TipoDeJunta == tipo && u.Area == area))
								{
									<div class="col-lg-4 col-md-6 pb-4 filter">
										<div class="card border border-info shadow-0 mb-3" style="max-width: 100%;">
												@if(@grupo.Alateen == "Alateen")
												{
													<div class="card-header" style="background-color: #000DFF; color:white;">
															Alateen! @grupo.Nombre
													</div>
												}
												else
												{
													<div class="card-header" style="background-image: linear-gradient(135deg, #6B73FF 10%, #000DFF 100%);">
															@grupo.Nombre
													</div>
												}
											<div class="card-body">
												@*h5 class="card-title">Info card title</h5>*@
												<div class="row">
													@*<div class="col-xs-4 hidden-sm hidden-md hidden-lg">Direccion</div>*@
													<div class="col">Direccion:</div>
													<div class="col-auto">@grupo.Direccion</div>
												</div>
												<div class="row">
													<div class="col">Dias:</div>
													<div class="col-auto">@grupo.Dias</div>
												</div>
												<div class="row">
													<div class="col">Horas:</div>
													<div class="col-auto">@grupo.Horas</div>
												</div>
												<div class="row">
													<div class="col">Numero:</div>
													<div class="col-auto">@grupo.Numero</div>
												</div>
												<div class="row">
													<div class="col">Zoom Id:</div>
													<div class="col-auto">@grupo.NumeroDeSala</div>
												</div>
												<div class="row">
													<div class="col">Clave:</div>
													<div class="col-auto">@grupo.Contraseña</div>
												</div>
											</div>
										</div>
									</div>
								}
							</div>
						</div>
					}
				}
			}
		}
	}
	else
	{
		<p>No hay juntas.</p>
	}
}
@code {
	private List<GrupoDto> ListaDeGrupos = new();
	private bool isLoading { get; set; } = false;
	private InformacionDto Informacion = new();
	private bool EditarNumero = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		//Only load the categories the first time the page is rendered
		if (firstRender)
		{
			await ObtenerInfo();
			await ObtenerGrupos();
		}
	}

	private async Task ObtenerGrupos()
	{
		isLoading = true;
		StateHasChanged();
		var result = await _grupoRepository.ObtenerTodosLosGrupos();
		if (result != null && result.Exito)
		{
			ListaDeGrupos = result.Data;
		}
		isLoading = false;
		StateHasChanged();
	}

	private async Task ObtenerInfo()
	{
		isLoading = true;
		StateHasChanged();
		var result = await _infoRepository.ObtenerInfo();
		if (result != null && result.Exito)
		{
			Informacion = result.Data;
		}
		isLoading = false;
		StateHasChanged();
	}
}
