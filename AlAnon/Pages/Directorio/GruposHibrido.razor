@page "/Grupos"

@inject IGrupoRepository _grupoRepository
@inject IInfoRepository _infoRepository
@inject IJSRuntime _jsRuntime
@*@attribute [Authorize(Roles = "Admins")]*@

<_DeleteConfirmation isParentComponentProcessing="isLoading" DeleteFunc="DeleteConfirmed"></_DeleteConfirmation>
<div class="row mt-4">
	<h4 class="card-title text-primary">Manejar Lista De Juntas</h4>
	@if (isLoading)
	{
		//Loading Symbol
		<div class="text-center pt-4">
			<img src="/images/loading.gif">
		</div>
	}
	else
	{
		<div class="col-sm-4">
			<a href="grupos/crear" class="btn btn-primary form-control">Crear Junta </a> <br />
		</div>
		<div class="row">
			@if (EditarNumero)
			{
				<div class="col-sm">
					Numero De La Integrupal: <br />
					<input type="text" @bind-value="@Informacion.NumeroIntegrupal" />
					<button class="btn btn-primary btn-sm" @onclick="GrabarNumero">Guardar</button> <br />
				</div>
			}
			else
			{
				<div class="col-sm">
					Numero De La Integrupal: <br />
					@Informacion.NumeroIntegrupal
					<button class="btn btn-primary btn-sm" @onclick="ActualizarNumero">Editar</button> <br />
				</div>
			}
		</div>

		@if (ListaDeGrupos.Count() > 0)
		{
			<div class="container">
				<div class="row pt-3 backgroundWhite">
					@foreach (var grupo in ListaDeGrupos)
					{
						<div class="col-lg-4 col-md-6 pb-4 filter">
							<div class="card border border-info shadow-0 mb-3" style="max-width: 100%;">
								<div class="card-header" style="background-color: #000DFF; color:white;">@grupo.Nombre</div>
								<div class="card-body">
									@*h5 class="card-title">Info card title</h5>*@
									<div class="row">
										<div class="col" style="font-weight:bold;">Tipo:</div>
										<div class="col-auto">@grupo.TipoDeJunta</div>
									</div>
									<div class="row">
										@*<div class="col-xs-4 hidden-sm hidden-md hidden-lg">Direccion</div>*@
										<div class="col" style="font-weight:bold;">Area:</div>
										<div class="col-auto">@grupo.Area</div>
									</div>
									<div class="row">
										<div class="col" style="font-weight:bold;">Alanon o Alateen:</div>
										<div class="col-auto">@grupo.Alateen</div>
									</div>
									<div class="row">
										<div class="col-5" style="font-weight:bold;">Direccion:</div>
										<div class="col" style="direction: rtl;">@grupo.Direccion</div>
									</div>
									<div class="row">
										<div class="col" style="font-weight:bold;">Dias:</div>
										<div class="col-auto">@grupo.Dias</div>
									</div>
									<div class="row">
										<div class="col" style="font-weight:bold;">Horas:</div>
										<div class="col-auto">@grupo.Horas</div>
									</div>
									<div class="row">
										<div class="col-5" style="font-weight:bold;">Numero:</div>
										<div class="col" style="direction: rtl;">@grupo.Numero</div>
									</div>
									<div class="row">
										<div class="col" style="font-weight:bold;">Zoom Id:</div>
										<div class="col-auto">@grupo.NumeroDeSala</div>
									</div>
									<div class="row">
										<div class="col" style="font-weight:bold;">Clave:</div>
										<div class="col-auto">@grupo.Contraseña</div>
									</div>
								</div>
								<div class="card-footer">
									@*Footer*@
									<div class="row">
										<div class="col">
											<NavLink href="@($"grupos/editar/{grupo.Id}")" class="btn-primary btn">Editar</NavLink>
											<button class="btn btn-danger" @onclick="()=>HandleDelete(grupo.Id)">Borrar</button>
										</div>
									</div>
								</div>
							</div>
						</div>

					}
				</div>
			</div>
		}
		else
		{
			//no records
			<p>No hay juntas que manejar.</p>
		}
	}
</div>
@code {
	private List<GrupoDto> ListaDeGrupos { get; set; } = new List<GrupoDto>();
	private GrupoDto Grupo = new();
	private bool isLoading { get; set; } = true;
	private int savedId;
	private InformacionDto Informacion = new();
	private string numeroGrabado = string.Empty;
	private bool EditarNumero = false;
	//Done after a first render
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		//Only load the categories the first time the page is rendered
		if (firstRender)
		{
			await ObtenerInfo();
			await ObtenerGrupos();
		}
	}

	private async Task ObtenerGrupos()
	{
		isLoading = true;
		StateHasChanged();
		var result = await _grupoRepository.ObtenerTodosLosGrupos();
		if (result != null && result.Exito)
		{
			ListaDeGrupos = result.Data;
		}
		isLoading = false;
		StateHasChanged();
	}

	private async Task ObtenerInfo()
	{
		isLoading = true;
		StateHasChanged();
		var result = await _infoRepository.ObtenerInfo();
		if (result != null && result.Exito)
		{
			Informacion = result.Data;
			numeroGrabado = Informacion.NumeroIntegrupal;
		}
		EditarNumero = false;
		isLoading = false;
		StateHasChanged();
	}

	private async Task HandleDelete(int id)
	{
		savedId = id;
		await _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmation");
	}

	private async Task ActualizarNumero()
	{
		EditarNumero = true;
	}

	private async Task GrabarNumero()
	{
		if (numeroGrabado == Informacion.NumeroIntegrupal)
		{
			await _jsRuntime.ToastrSuccess("Numero Ya Esta Grabado.");
			EditarNumero = false;
			return;
		}
		var resultado = await _infoRepository.CrearEditarInfo(Informacion);
		if (resultado != null && resultado.Exito)
		{
			await _jsRuntime.ToastrSuccess("Numero Grabado Exitosamente.");
		}
		else
		{
			await _jsRuntime.ToastrError("Numero No Se Pudo Grabar.");
		}
		await ObtenerInfo();
	}

	public async Task DeleteConfirmed(bool confirmed)
	{
		isLoading = true;
		if (confirmed && savedId != 0)
		{
			await _grupoRepository.BorrarGrupo(savedId);
			await _jsRuntime.ToastrSuccess("Grupo Borrado Exitosamente.");
			await ObtenerGrupos();
			await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmation");
		}
		isLoading = false;
	}
}
